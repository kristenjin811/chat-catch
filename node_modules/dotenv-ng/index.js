"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = exports.values = exports.parse = exports.parseString = exports.LOCAL_ENV_FILE = exports.DEFAULT_ENV_FILE = void 0;
const parser_1 = require("./parser");
const debug = require("debug");
const log = debug("dotenv-ng");
exports.DEFAULT_ENV_FILE = ".env";
exports.LOCAL_ENV_FILE = ".env.local";
function prepareParameters(path, options, defaultOptions) {
    log("prepareParameters(path: %s, options: %o, defaultOptions: %o)", typeof path === "string" ? path : JSON.stringify(path), options, defaultOptions);
    // call()
    if (!path) {
        const final = {
            path: exports.DEFAULT_ENV_FILE,
            options: Object.assign(Object.assign({}, parser_1.DEFAULT_OPTIONS), (defaultOptions || {})),
        };
        log("prepareParameters -> call(): %o", final);
        return final;
    }
    // call({options})
    if (typeof path === "object") {
        const final = {
            path: exports.DEFAULT_ENV_FILE,
            options: Object.assign(Object.assign(Object.assign({}, parser_1.DEFAULT_OPTIONS), (defaultOptions || {})), (path || {})),
        };
        log("prepareParameters -> call(options): %o", final);
        return final;
    }
    // call("path")
    // call("path", options)
    const final = {
        path,
        options: Object.assign(Object.assign(Object.assign({}, parser_1.DEFAULT_OPTIONS), (defaultOptions || {})), (options || {})),
    };
    log("prepareParameters -> call(path, options?): %o", final);
    return final;
}
/**
 * Parses environment file content and returns parsed data and errors.
 * @param content The content of the environment file.
 * @param options The parse-options.
 * @returns
 */
function parseString(content, options) {
    log("parseString(content: %s, options: %o)", content, options);
    parser_1.default.setOptions(options);
    const result = parser_1.default.parseString(content);
    log("parseString -> %o", result);
    return result;
}
exports.parseString = parseString;
/**
 * Parses environment files and returns parsed data and errors.
 * @param path Either the path to the file or the path to the folder
 *             containing environment files. Defaults to (CWD)/.env
 * @param options The parse-options.
 * @returns
 */
function parse(path, options) {
    const { path: parsedPath, options: parsedOptions } = prepareParameters(path, options);
    log("parse(path: %s, options: %o)", parsedPath, parsedOptions);
    parser_1.default.setOptions(parsedOptions);
    const result = parser_1.default.parse(parsedPath);
    log("parse -> %o", result);
    return result;
}
exports.parse = parse;
/**
 * Parses environment files and returns parsed data.
 * @param path Either the path to the file or the path to the folder
 *             containing environment files. Defaults to (CWD)/.env
 * @param options The parse-options.
 * @returns
 */
function values(path, options) {
    const { path: parsedPath, options: parsedOptions } = prepareParameters(path, options);
    log("values(path: %s, options: %o)", parsedPath, parsedOptions);
    const parsed = parse(parsedPath, parsedOptions);
    const result = parsed.data;
    log("values -> %o", result);
    return result;
}
exports.values = values;
/**
 * Parses environment files and loads the parsed data to process.env.
 * @param path Either the path to the file or the path to the folder
 *             containing environment files. Defaults to (CWD)/.env
 * @param options The parse-options.
 * @returns
 */
function load(path, options) {
    const { path: parsedPath, options: parsedOptions } = prepareParameters(path, options);
    log("load(path: %s, options: %o)", parsedPath, parsedOptions);
    const v = values(parsedPath, parsedOptions);
    log("load -> %o", v);
    // @ts-ignore ENV can only contain string, but we can ignore it
    process.env = parser_1.default.getInterpolatedEnv(v);
}
exports.load = load;
//# sourceMappingURL=index.js.map