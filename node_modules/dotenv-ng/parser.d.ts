export interface DotEnvParseOptions {
    /**
     * Should the casing of special literals
     * (e.g. `true`, `false`, `null`, `undefined`, `NaN`) be ignored.
     * Defaults to true.
     */
    ignoreLiteralCase?: boolean;
    /**
     * Should special literals be parsed as their JS values
     * (e.g. `true`, `false`, `null`, `undefined`, `NaN`)
     * or parsed as strings. Defaults to true.
     */
    parseLiterals?: boolean;
    /**
     * Should number literals be parsed as numbers or parsed as strings.
     * Defaults to true.
     */
    parseNumbers?: boolean;
    /**
     * Should empty variables (without a values set) be allowed.
     * Defaults to true.
     */
    allowEmptyVariables?: boolean;
    /**
     * Should orphan keys be allowed (line 24) or parsed as empty variables.
     * Defaults to false.
     */
    allowOrphanKeys?: boolean;
    /**
     * Should string interpolation evaluated for other
     * environment variables or handled as literal strings.
     * Defaults to true.
     */
    interpolationEnabled?: boolean;
    /**
     * Should the existing environment variable values be overwritten.
     * Defaults to false.
     */
    overwriteExisting?: boolean;
    /**
     * The environment specific environment file to be loaded,
     * if a folder is processed.
     */
    environment?: string;
}
export declare const DEFAULT_OPTIONS: DotEnvParseOptions;
export interface ParseError {
    file?: string;
    line: number;
    error: "ORPHAN_KEY" | "MISSING_KEY" | "INVALID_EXPRESSION" | "EMPTY_VARIABLE";
    data: string;
}
export declare type LiteralValue = undefined | null | number | boolean;
export declare type ParsedValue = string | LiteralValue;
export interface ParsedData {
    [key: string]: ParsedValue;
}
export interface ParseResult {
    data: ParsedData;
    errors: ParseError[];
}
export declare class EnvFileParser {
    private options;
    private static readonly rules;
    private static readonly COMMENT_LINE;
    private static readonly VARIABLE_LINE;
    private static readonly INTERPOLATION;
    setOptions(options: DotEnvParseOptions): void;
    private static isCommentLine;
    private static parseLine;
    private static interpolateValue;
    getInterpolatedEnv(values: ParsedData): ParsedData;
    private intepolateValues;
    private parseValue;
    parse(path: string): ParseResult;
    parseLine(line: string): [string, ParsedValue];
    parseString(content: string, path?: string): ParseResult;
    parseFile(path: string): ParseResult;
}
declare const parser: EnvFileParser;
export default parser;
